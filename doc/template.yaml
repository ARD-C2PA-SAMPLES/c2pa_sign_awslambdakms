Transform: AWS::Serverless-2016-10-31
Recources:
  s3BucketPathEnv:
    Description: !Sub
      - Stack ${AWS::StackName} Resources
      - Stack ${AWS::StackName} Resources
    Type: String
    Default: data
    MaxLength: 50
  s3BucketPathSignedEnv:
    Description: !Sub
      - Stack ${AWS::StackName} Resources
      - Stack ${AWS::StackName} Resources
    Type: String
    Default: data_sign
    MaxLength: 50
  kmsKeyIdEnv:
    Description: !Sub
      - Stack ${AWS::StackName} Resources
      - Stack ${AWS::StackName} Resources
    Type: String
    Default: 45c6d6f5-2cbc-4eed-8fd5-9bcec8b2fa47

Resources:
  FunctionC2PASign:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: FunctionC2PASign
      CodeUri: null
      Handler: lambda_c2pasign::c2panalyze.Function::FunctionHandlerSign
      Runtime: dotnet8
      PackageType: Zip
      Architectures:
        - x86_64
      MemorySize: 3008
      Timeout: 600
      Tracing: Active
      Events:
        BucketC2PASign:
          Type: S3
          Properties:
            Bucket: !Ref BucketC2PASign
            Events:
              - s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref s3BucketPath
                  - Name: suffix
                    Value: .mp4
      Environment:
        Variables:
          kmsKeyId: !Ref kmsKeyIdEnv
          s3BucketPath: !Ref s3BucketPathEnv
          s3BucketPathSigned: !Ref s3BucketPathSignedEnv
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:*
                - s3-object-lambda:*
              Resource: '*'
  FunctionC2PASignLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${FunctionC2PASign}
  BucketC2PASign:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-bucketc2p-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketC2PASignBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketC2PASign
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt BucketC2PASign.Arn
              - !Sub ${BucketC2PASign.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'